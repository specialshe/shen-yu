EBMT_DIR := /share/tool/EBMT++
BASE_DIR := $(shell pwd)
TMP_DIR := /tmp/$(USER)
WORK_DIR := $(BASE_DIR)/tuning
MOSES_DIR := /share/tool/MT/tool/SMT/mosesdecoder
EXTRACTOR := $(MOSES_DIR)/mert/extractor
PRO := $(MOSES_DIR)/mert/pro
MEGAM := $(EBMT_DIR)/tuning/megam_i686.opt
MAX_ITERATION := 20
I := 0

INIT_WEIGHT := /share/tool/EBMT++/src/weights.ini
EBMT := $(EBMT_DIR)/src/KyotoEBMT
CONFIG := /zinnia/ebmt_data/ja-en/ini/ebmt-je.ini
IN_DIR := /zinnia/ebmt_data/ja-en/input/NTCIR-10/test/ja-en/input
FILES := $(wildcard $(IN_DIR)/*.xml)
HYP_DIR := $(WORK_DIR)/hyp
HYP_DONE_DIR := $(WORK_DIR)/hyp_done
HYP_DONE := $(patsubst $(IN_DIR)/%.xml,$(HYP_DONE_DIR)/%.hyp.created,$(FILES))
HYPS := $(wildcard $(HYP_DIR)/*.hyp)
HYP_FILE_LIST := $(WORK_DIR)/hyp_file_list.txt
RESULT_DIR := $(WORK_DIR)/output
OUTS := $(patsubst $(HYP_DIR)/%.hyp,$(RESULT_DIR)/%.txt,$(HYPS))
THREAD := 2
NBEST := 500
BEAM := 500

REF := /zinnia/ebmt_data/ja-en/input/NTCIR-10/dev/ja-en/dev.en
IN_ID := $(IN_DIR)/../input_id.txt
FORMAT_NBEST_OUTPUT := /share/tool/MT/script/format_nbest_output.pl
MAKE_DATA_FOR_EVAL_COM := /share/tool/MT/script/make_data_for_evaluation.pl
BLEU := /share/tool/MT/tool/SMT/mosesdecoder/scripts/generic/multi-bleu.perl
RIBES := /share/tool/MT/tool/evaluation/RIBES/RIBES.py

EBMT_ARGS := -c $(CONFIG) --weight $(WORK_DIR)/run$(I).weights.dat --output_mode tuning -n $(NBEST) --beam_width $(BEAM) --input_mode hypothesis --nb_thread $(THREAD) --filter_additionals $(EBMT_OPTIONS)

LAST_MAKEFILE = $(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))

##########

define iteration
$(WORK_DIR)/run$(1).weights.dat: $(WORK_DIR)/run$(shell expr $(1) - 1).weights.dat $(WORK_DIR)/hyp_file_list.txt
	@mkdir -p $(WORK_DIR)
	@echo "***** Iteration $(shell expr $(1) - 1) *****"
	@+$(MAKE) -f $(LAST_MAKEFILE) translate I=$(shell expr $(1) - 1)
endef

all: $(WORK_DIR)/run$(MAX_ITERATION).weights.dat

$(WORK_DIR)/run0.weights.dat: $(HYP_DONE)
	@echo "Hypothesis files have been created. Start tuning."
	@cp $(INIT_WEIGHT) $@

$(WORK_DIR)/hyp_file_list.txt: $(HYP_DONE)
	@for f in $(HYP_DIR)/*.hyp; do echo `basename $$f .hyp`; done | LC_ALL=C sort > $@

$(foreach x,$(shell seq 1 $(MAX_ITERATION)), \
 $(eval $(call iteration,$(x))))

$(HYP_DONE): $(HYP_DONE_DIR)/%.hyp.created: $(IN_DIR)/%.xml
	@mkdir -p $(TMP_DIR) $(HYP_DIR) $(HYP_DONE_DIR) && \
    cd $(TMP_DIR) && \
    nice -10 $(EBMT) -c $(CONFIG) --weight $(INIT_WEIGHT) --output_mode hypothesis --hypothesis_output_prefix $(HYP_DIR)/$* --nb_thread $(THREAD) --filter_additionals $< && \
    touch $@ && \
    echo "creating hypothesis for $< done."

translate: show_trans_option $(OUTS)
	@echo "Translation finished. Start optimization... " && \
    $(FORMAT_NBEST_OUTPUT) $(HYP_FILE_LIST) $(RESULT_DIR) $(WORK_DIR)/run$(I).n_best.dat $(WORK_DIR)/run$(I).top1.dat && \
    rm -rf $(RESULT_DIR) && \
    for f in $(WORK_DIR)/*.n_best.dat; do cat $$f; done | LC_ALL=C sort -k1,1n > $(WORK_DIR)/run$(I).n_best_all.dat && \
    $(EXTRACTOR) --scconfig "case:true" --scfile $(WORK_DIR)/run$(I).scores.dat --ffile $(WORK_DIR)/run$(I).features.dat -r $(REF) -n $(WORK_DIR)/run$(I).n_best_all.dat 2> $(WORK_DIR)/run$(I).tuning.log && \
    $(PRO) --scfile $(WORK_DIR)/run$(I).scores.dat --ffile $(WORK_DIR)/run$(I).features.dat -o $(WORK_DIR)/run$(I).pro.dat 2>> $(WORK_DIR)/run$(I).tuning.log && \
    $(MEGAM) -fvals -maxi 30 -nobias binary $(WORK_DIR)/run$(I).pro.dat > $(WORK_DIR)/run$(I).megam.dat 2>> $(WORK_DIR)/run$(I).tuning.log && \
    python $(EBMT_DIR)/tuning/format_weights.py $(WORK_DIR)/run0.weights.dat $(WORK_DIR)/run$(I).megam.dat $(WORK_DIR)/run$(shell expr $(I) + 1).weights.dat && \
    echo "Optimization finished." && \
    $(BLEU) $(REF) < $(WORK_DIR)/run$(I).top1.dat > $(WORK_DIR)/run$(I).score.txt && \
    echo -n "RIBES = " >> $(WORK_DIR)/run$(I).score.txt && \
    $(RIBES) $(WORK_DIR)/run$(I).top1.dat -r $(REF) >> $(WORK_DIR)/run$(I).score.txt 2> /dev/null && \
    echo "Evaluation Result" && \
    cat $(WORK_DIR)/run$(I).score.txt

show_trans_option:
	@$(EBMT) $(EBMT_ARGS) --display_param

$(OUTS): $(RESULT_DIR)/%.txt: $(HYP_DIR)/%.hyp
	@mkdir -p $(TMP_DIR) $(RESULT_DIR) && \
    cd $(TMP_DIR) && \
    nice -10 $(EBMT) $(EBMT_ARGS) $< > $*.txt && \
    mv $*.txt $@
